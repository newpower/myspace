// Generated by CoffeeScript 1.4.0
(function() {
  var library;

  library = (window.g || (window.g = {}));

  library.Messenger = (function() {
    var format, global_place;

    global_place = $(document);

    format = function(message) {
      if (this.place === global_place) {
        return 'global_' + message;
      } else {
        return 'local_' + message;
      }
    };

    function _Class(place) {
      if (place == null) {
        place = global_place;
      }
      this.place = place.css ? place : $(place);
    }

    _Class.prototype.listen = function(message, reaction) {
      return this.place.bind(format.call(this, message), function() {
        return $("#division_1").val(arguments[1]).change();
      });
    };

    _Class.prototype.notify = function(message, data) {
      return this.place.trigger(format.call(this, message), [data]);
    };

    return _Class;

  })();

  library.HashData = (function() {
    var convert, hash;

    convert = {
      toObject: function(string) {
        return JSON.parse(string);
      },
      toString: function(object) {
        return JSON.stringify(object);
      }
    };

    hash = {
      object: {
        get: function() {
          var hash_string;
          try {
            hash_string = window.location.hash.match(/[^#].*/)[0];
            return convert.toObject(hash_string);
          } catch (_error) {}
        },
        set: function(object) {
          return window.location.hash = convert.toString(object);
        }
      }
    };

    function _Class(key) {
      this.key = key;
    }

    _Class.prototype.get = function() {
      var _ref;
      return (_ref = hash.object.get()) != null ? _ref[this.key] : void 0;
    };

    _Class.prototype.set = function(data) {
      var new_hash_object;
      new_hash_object = hash.object.get() || {};
      new_hash_object[this.key] = data;
      return hash.object.set(new_hash_object);
    };

    _Class.prototype.asParam = function() {
      try {
        return decodeURIComponent($.param(this.get()));
      } catch (e) {
        return null;
      }
    };

    return _Class;

  })();

  library.Division = (function() {
    var change_to, default_options, extend, init_events, message, remember, template;

    message = {
      change_division: 'change_division',
      division_changed: 'division_changed',
      show_division: 'show_division',
      hide_division: 'hide_division'
    };

    default_options = {
      messenger: new library.Messenger,
      data_url: '',
      selected_id: 0,
      parent_element: null,
      hash_data: new library.HashData('division')
    };

    template = {
      content: "  {{each divisions}}                <select class='item-sel'>                  <option value='${$value[0].parent_id}' class='empty'></option>                  {{each $value}}                  <option  {{if $value.selected }} selected {{/if}} {{if $value.isWritable }} isGood {{else}} isDivision {{/if}} value=${$value.id}>${$value.name}</option>                  {{/each}}                </select>                {{/each}}                {{if children.length}}                <select class='item-sel'>                  <option value='${children[0].parent_id}' class='empty'></option>                  {{each children}}                  <option {{if $value.isWritable }} isGood {{else}} isDivision {{/if}} value=${$value.id}> ${$value.name} </option>                  {{/each}}                </select>                {{/if}}  "
    };

    remember = function(id) {
      this.selected_id = id;
      this.hash_data.set(id);
      return this.messenger.notify(message.division_changed, id);
    };

    change_to = function(id) {
      var how, select, self;
      self = this;
      select = self.parent_element.find('select.item-sel').has("option[value=" + id + "]:not(.empty)");
      how = select.length === 0 ? 'for_first_time' : 'not_for_first_time';
      return $.ajax({
        dataType: 'json',
        type: 'GET',
        url: self.data_url,
        data: {
          division_id: id,
          how: how
        },
        cache: false,
        success: function(divisions) {
          var html;
          html = $.tmpl(template.content, divisions);
          if (how === 'for_first_time') {
            self.parent_element.html(html);
          } else {
            select.nextAll().remove();
            select.val(id);
            html.appendTo(self.parent_element);
          }
          self.parent_element.find('select.item-sel').each(function() {
            var isDivision, isGood;
            isDivision = (($(this)).find('option[isDivision]')).length > 0;
            isGood = (($(this)).find('option[isGood]')).length > 0;
            if (isDivision && isGood) {
              return (($(this)).find('option.empty')).text(t('Укажите раздел или товар'));
            } else {
              if (isGood) {
                (($(this)).find('option.empty')).text(t('Укажите товар'));
              }
              if (isDivision) {
                return (($(this)).find('option.empty')).text(t('Укажите раздел'));
              }
            }
          });
          return remember.call(self, id);
        }
      });
    };

    init_events = function() {
      var self;
      self = this;
      this.parent_element.find('select.item-sel').live('change', function() {
        if (($(this)).find('option:selected').hasClass('empty')) {
          ($(this)).nextAll().remove();
          return remember.call(self, ($(this)).val());
        } else {
          return change_to.call(self, ($(this)).val());
        }
      });
      this.messenger.listen(message.change_division, function(division_id) {
        return change_to.call(self, division_id);
      });
      this.messenger.listen(message.hide_division, function() {
        return self.hide();
      });
      return this.messenger.listen(message.show_division, function() {
        return self.show();
      });
    };

    extend = function(options) {
      var key, value, _results;
      _results = [];
      for (key in options) {
        value = options[key];
        _results.push(this[key] = value);
      }
      return _results;
    };

    function _Class(options) {
      var selected_division;
      if (options == null) {
        options = {};
      }
      extend.call(this, default_options);
      extend.call(this, options);
      if (!this.parent_element.css) {
        this.parent_element = $(this.parent_element);
      }
      init_events.call(this);
      selected_division = this.hash_data.get() || this.selected_id;
      change_to.call(this, selected_division);
    }

    _Class.prototype.hide = function() {
      return this.parent_element.hide();
    };

    _Class.prototype.show = function() {
      return this.parent_element.show();
    };

    return _Class;

  })();

  library.Criteria = (function() {
    var add_criterion, create_criterion, criterionCount, default_options, extend, init_criterion, init_events, remove_criterion, template;

    default_options = {
      submit_element: null,
      criteria_element: null,
      division_element: null,
      division_select: null,
      hash_divisions: new library.HashData('divisions'),
      hash_occupations: new library.HashData('occupations')
    };

    template = {
      content: "<div><div class='criterion'>						<a id='remove_criterion_${Count}' href='#'>							<img width='16' height='16' src='/img/icons/delete3.png'>						</a>						<input type='hidden' name='division[${Count}]' value='${Division}'>						{{each Occupation}}							<input type='hidden' name='occupation[${Count}][${$index}]' value='${$value}'>						{{/each}}						${Name}{{each OccupationName}}, ${$value}{{/each}}					<div></div>"
    };

    criterionCount = 1;

    remove_criterion = function(id, self) {
      return $('#remove_criterion_' + id).live('click', function() {
        var divisions, occupations;
        $('#remove_criterion_' + id).parent().remove();
        divisions = self.hash_divisions.get();
        occupations = self.hash_occupations.get();
        delete divisions[id];
        delete occupations[id];
        self.hash_divisions.set(divisions);
        self.hash_occupations.set(occupations);
        return false;
      });
    };

    create_criterion = function(parameters, self) {
      var html;
      html = $.tmpl(template.content, parameters);
      self.criteria_element.append(html);
      remove_criterion(criterionCount, self);
      return criterionCount++;
    };

    init_criterion = function() {
      var div, division, divisions, i, index, occupation, occupation_id, occupation_name, occupations, parameters, self, temp, _ref, _results;
      self = this;
      divisions = this.hash_divisions.get();
      occupations = this.hash_occupations.get();
      _results = [];
      for (index in divisions) {
        division = divisions[index];
        criterionCount = index;
        div = division.split('-');
        occupation_id = new Array();
        occupation_name = new Array();
        _ref = occupations[index];
        for (i in _ref) {
          occupation = _ref[i];
          temp = occupation.split('-');
          occupation_id.push(temp[0]);
          occupation_name.push(temp[1]);
        }
        parameters = {
          Count: criterionCount,
          Division: div[0],
          Occupation: occupation_id,
          Name: div[1],
          OccupationName: occupation_name
        };
        _results.push(create_criterion(parameters, self));
      }
      return _results;
    };

    add_criterion = function(parameters, self) {
      var divisions, i, new_occupation, occupation, occupations, _ref;
      create_criterion(parameters, self);
      divisions = self.hash_divisions.get();
      occupations = self.hash_occupations.get();
      if (!divisions) {
        divisions = {};
      }
      if (!occupations) {
        occupations = {};
      }
      divisions[parameters.Count] = parameters.Division + '-' + parameters.Name;
      new_occupation = new Array();
      _ref = parameters.Occupation;
      for (i in _ref) {
        occupation = _ref[i];
        new_occupation.push(occupation + '-' + parameters.OccupationName[i]);
      }
      occupations[parameters.Count] = new_occupation;
      self.hash_divisions.set(divisions);
      return self.hash_occupations.set(occupations);
    };

    init_events = function() {
      var self;
      self = this;
      return this.submit_element.live('click', function() {
        var division, name, occupation, occupation_name, parameters;
        division = self.division_element.val();
        if ((division != null) && (division !== "") && (division !== 0) && (division !== "0")) {
          occupation_name = Array();
          occupation = $('input:checkbox:checked.occupation').map(function() {
            occupation_name.push($('input:checkbox[value=' + this.value + ']').attr('data-name'));
            return this.value;
          });
          occupation = occupation.get();
          name = self.division_select.find('select option[value=' + division + ']:first').text();
          parameters = {
            Count: criterionCount,
            Division: division,
            Occupation: occupation,
            Name: name,
            OccupationName: occupation_name
          };
          add_criterion(parameters, self);
          self.division_element.val(0);
          $('input:checkbox:checked.occupation').attr({
            checked: false
          });
          self.division_select.find('select').val('');
          return self.division_select.find('select:first').nextAll().remove();
        }
      });
    };

    extend = function(options) {
      var key, value, _results;
      _results = [];
      for (key in options) {
        value = options[key];
        _results.push(this[key] = value);
      }
      return _results;
    };

    function _Class(options) {
      if (options == null) {
        options = {};
      }
      extend.call(this, default_options);
      extend.call(this, options);
      init_events.call(this);
      init_criterion.call(this);
    }

    return _Class;

  })();

}).call(this);
