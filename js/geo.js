// Generated by CoffeeScript 1.4.0
(function() {
  var Address, AddressNode, Catalog, Content, Geo, Map, MapRegion, Module, a, address, catalog, content, isNumber, mixin, recursiveChangeAddresses,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  mixin = {};

  mixin.ready = function() {
    var dfd;
    this.ready || (this.ready = function(dfd) {
      return dfd.resolve(this);
    });
    if (typeof this.ready === 'function') {
      dfd = $.Deferred();
      this.ready(dfd);
      return this.ready = dfd.promise();
    }
  };

  mixin.events = function(options) {
    this._global_events || (this._global_events = $('body'));
    this._local_events || (this._local_events = this.sandbox);
    this.notify = function(e, data) {
      if (data == null) {
        data = {};
      }
      return this._global_events.trigger("" + e + "_{" + (this.constructor.name.toLowerCase()) + "}", [data]);
    };
    this._bind = function(events) {
      var k, v, _results,
        _this = this;
      if (events == null) {
        events = {};
      }
      _results = [];
      for (k in events) {
        v = events[k];
        _results.push((function(k, v) {
          var ev, method, p, selector;
          method = _this[v];
          p = k.indexOf(' ');
          if (p > 0) {
            ev = k.substring(0, p);
            selector = k.substring(k.indexOf(' ') + 1, k.length);
          } else {
            ev = k;
          }
          if (selector != null ? selector.match(/^{/) : void 0) {
            return _this._global_events.on(k.replace(' ', '_'), function() {
              return method.apply(_this, arguments);
            });
          } else {
            return _this._local_events.on(ev, selector, function() {
              return method.apply(_this, arguments);
            });
          }
        })(k, v));
      }
      return _results;
    };
    return this._bind(this.events);
  };

  isNumber = function(n) {
    return typeof n === 'number' && !isNaN(n) && isFinite(n);
  };

  Module = (function() {

    function Module(sandbox, options) {
      if (options == null) {
        options = {};
      }
      $.extend(true, this.options, options);
      this.sandbox = sandbox.css ? sandbox : $(sandbox);
      this.constructor.all.push(this);
      mixin.events.apply(this);
      mixin.ready.apply(this);
    }

    Module.all = [];

    Module.prototype.options = {};

    return Module;

  })();

  Geo = (function() {

    Geo.all = {};

    Geo.find_or_create = function(data) {
      var i;
      i = this.all[data.id];
      if (i) {
        return i.ready;
      } else {
        return (new this(data)).ready;
      }
    };

    Geo.info = function(id) {
      var _ref,
        _this = this;
      if ((_ref = this._info) != null ? _ref[id] : void 0) {
        return this._info[id];
      } else {
        if (!this.dfd) {
          this.dfd = $.Deferred();
          $.ajax({
            url: "/geodata/info.js",
            dataType: 'json',
            success: function(data) {
              _this._info = data;
              return _this.dfd.resolve(_this._info[id]);
            },
            error: function() {
              return _this.dfd.reject(_this);
            }
          });
        }
        return this.dfd.promise();
      }
    };

    function Geo(data) {
      this.data = data;
      this.id = this.data.id;
      this.level = this.data.level;
      this.constructor.all[this.id] = this;
      this._init();
      mixin.ready.apply(this);
    }

    Geo.prototype._init = function() {
      var _ref;
      if (!isNumber(this.level)) {
        if (this.parent) {
          this.data.level = (this.parent.level || 0) + 1;
        }
        this.level = Number(this.data.level);
        if (this.data.level > 1) {
          this._children = [];
        }
      }
      if (this.level === -1) {
        this.center = [67.315188, 95.944043];
        this.zoom = 2;
      }
      return (_ref = this.points) != null ? _ref : this.points = this.data.points;
    };

    Geo.prototype.ready = function(dfd) {
      var _this = this;
      if (!this._children) {
        if ((this.data.parent && this.data.parent.level >= 1) || this.data.level > 1 || this.level > 1) {
          dfd.resolve(this);
          return;
        }
        return $.ajax({
          url: "/geodata/" + this.id + ".js",
          dataType: 'json',
          success: function(data) {
            _.extend(_this.data, data);
            $.when(_this.constructor.info(_this.id)).then(function(info) {
              _this.data.info = info;
              return _this._init();
            });
            _this._init();
            return dfd.resolve(_this);
          },
          error: function() {
            return dfd.reject(_this);
          }
        });
      } else {
        return dfd.resolve(this);
      }
    };

    Geo.prototype.children = function() {
      var c, ch, id, _ref;
      if (!this._children) {
        this._children = {};
      }
      _ref = this.data.children;
      for (id in _ref) {
        ch = _ref[id];
        ch.parent = this;
        c = this._children[id] = this.constructor.all[id] || new this.constructor(ch);
        c.parent = this;
        c._init();
      }
      return this._children;
    };

    Geo.prototype.neighbors = function() {
      var ch, id, r, _ref, _ref1;
      r = void 0;
      _ref1 = (_ref = this.parent) != null ? _ref.children() : void 0;
      for (id in _ref1) {
        ch = _ref1[id];
        if (ch !== this) {
          (r || (r = {}))[id] = ch;
        }
      }
      return r;
    };

    Geo.prototype._iter = function(points) {
      var max, min, p, p0, p1, pp, _i, _j, _len, _len1;
      min = [255, 255];
      max = [0, 0];
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        pp = points[_i];
        for (_j = 0, _len1 = pp.length; _j < _len1; _j++) {
          p = pp[_j];
          p0 = p[0];
          p1 = p[1];
          if (p0 < min[0]) {
            min[0] = p0;
          }
          if (p1 < min[1]) {
            min[1] = p1;
          }
          if (p0 > max[0]) {
            max[0] = p0;
          }
          if (p1 > max[1]) {
            max[1] = p1;
          }
        }
      }
      return [min, max];
    };

    Geo.prototype.deeper = function() {
      var g, id, r, _ref;
      r = {};
      _ref = this.constructor.all;
      for (id in _ref) {
        g = _ref[id];
        if (g.level > this.level) {
          r[id] = g;
        }
      }
      return r;
    };

    Geo.prototype.upper = function() {
      var g, id, r, _ref;
      r = {};
      _ref = this.constructor.all;
      for (id in _ref) {
        g = _ref[id];
        if (g.level < this.level) {
          r[id] = g;
        }
      }
      return r;
    };

    Geo.prototype.bounds = function() {
      var b, ch, id, p, _ref, _ref1;
      if (!this._bounds) {
        if (this.data.bounding_box) {
          b = this.data.bounding_box;
          this._bounds = [[b[2], b[0]], [b[3], b[1]]];
        } else if ((_ref = this.points) != null ? _ref.length : void 0) {
          this._bounds = this._iter(this.points);
        } else if (this.children()) {
          p = [];
          _ref1 = this.children();
          for (id in _ref1) {
            ch = _ref1[id];
            p.push(ch.bounds());
          }
          p = _.compact(p);
          if (p.length) {
            this._bounds = this._iter(p);
          }
        }
      }
      return this._bounds;
    };

    Geo.prototype.draw2 = function(options) {
      var ch, chp, chs, defaults, distance, i, id, l1, p1, points, _i, _len;
      if (options == null) {
        options = {};
      }
      defaults = {
        fillColor: '#99000011',
        strokeWidth: 1,
        strokeColor: '#00000066'
      };
      distance = function(p1, p2) {
        return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));
      };
      chs = this.children();
      points = [];
      for (id in chs) {
        ch = chs[id];
        chp = ch.points;
        for (i = _i = 0, _len = chp.length; _i < _len; i = ++_i) {
          p1 = chp[i];
          l1 = new ymaps.Circle([p1, 10000], {
            hintContent: i
          }, {
            strokeColor: '#000000',
            strokeWidth: 1
          });
          map.ya.geoObjects.add(l1);
        }
      }
      points.push(points[0]);
      this.obj = new ymaps.Polygon([], {
        hintContent: '11'
      }, _.extend(defaults, options || {}));
      return this.obj;
    };

    return Geo;

  })();

  MapRegion = (function() {

    function MapRegion(geo) {
      this.geo = geo;
      this.geo.region = this;
    }

    MapRegion.prototype.show = function() {
      var _ref;
      return (_ref = this.obj) != null ? _ref.options.set('visible', true) : void 0;
    };

    MapRegion.prototype.hide = function() {
      var _ref;
      return (_ref = this.obj) != null ? _ref.options.set('visible', false) : void 0;
    };

    MapRegion.prototype.hide_deeper = function() {
      var g, id, _ref, _ref1, _results;
      _ref = this.geo.deeper();
      _results = [];
      for (id in _ref) {
        g = _ref[id];
        _results.push((_ref1 = g.region) != null ? _ref1.hide() : void 0);
      }
      return _results;
    };

    MapRegion.prototype.draw = function(options) {
      var defaults, points,
        _this = this;
      if (options == null) {
        options = {};
      }
      defaults = {
        fillColor: '#99000011',
        strokeWidth: 1,
        strokeColor: '#00000066'
      };
      points = JSON.stringify(this.geo.points);
      if (points.substring(0, 3) !== '[[[') {
        points = '[' + cds + ']';
      }
      points = JSON.parse(points);
      this.obj = new ymaps.Polygon(points, {
        hintContent: this.geo.data.name
      }, _.extend(defaults, options || {}));
      this.obj.events.add('click', function() {
        _this.highlight();
        return _this.click(_this.geo);
      });
      return this.obj;
    };

    MapRegion.prototype.click = function() {};

    MapRegion.prototype.added = false;

    MapRegion.prototype.options = function(attrs) {
      var key, value, _ref, _results;
      if (attrs == null) {
        attrs = {};
      }
      _results = [];
      for (key in attrs) {
        value = attrs[key];
        _results.push((_ref = this.obj) != null ? _ref.options.set(key, value) : void 0);
      }
      return _results;
    };

    MapRegion.prototype.unhiglight = function(opt) {
      if (opt == null) {
        opt = {};
      }
      this.highlighted = false;
      if (opt.fade) {
        this.options({
          strokeColor: '#00000000'
        });
      } else {
        this.options({
          strokeColor: '#00000066'
        });
      }
      return this.options({
        fillColor: '#99000011'
      });
    };

    MapRegion.prototype.highlight = function(opt) {
      var g, id, _ref;
      if (opt == null) {
        opt = {};
      }
      this.highlighted = true;
      this.options({
        fillColor: '#99000088'
      });
      _ref = Geo.all;
      for (id in _ref) {
        g = _ref[id];
        if (g.region) {
          if (g.level !== this.geo.level) {
            if (this.geo.level > 0 && g.level <= this.geo.level - 1) {
              g.region.unhiglight({
                fade: true
              });
            } else {
              g.region.unhiglight();
            }
          }
          if (g.level === this.geo.level && g.region !== this && opt.no_neighbors) {
            g.region.unhiglight();
          }
        }
      }
      this.hide_deeper();
      return this.show();
    };

    return MapRegion;

  })();

  Map = (function(_super) {

    __extends(Map, _super);

    function Map() {
      Map.__super__.constructor.apply(this, arguments);
    }

    Map.prototype.events = {
      'change {address}': 'on_change_address'
    };

    Map.prototype.options = {
      init: {
        ya: {
          center: [55.76, 37.67],
          zoom: 8,
          behaviors: ['drag']
        }
      }
    };

    Map.prototype.pos = function(params) {
      var center_and_zoom;
      if (params == null) {
        params = {};
      }
      if (params.bounds) {
        center_and_zoom = ymaps.util.bounds.getCenterAndZoom(params.bounds, [500, 300]);
      }
      if (params.center) {
        center_and_zoom = {
          zoom: params.zoom,
          center: params.center
        };
      }
      return this.ya.setCenter(center_and_zoom.center, center_and_zoom.zoom, {
        duration: 400
      });
    };

    Map.prototype.current = {
      id: -1
    };

    Map.prototype.on_change_address = function(e, geo) {
      var _this = this;
      return $.when(this.ready).then(function() {
        var g, id, _ref, _ref1, _ref2, _ref3;
        if (_this.current.id === geo.id) {
          return;
        }
        _this.current = geo;
        _ref = geo.neighbors();
        for (id in _ref) {
          g = _ref[id];
          if ((_ref1 = g.region) != null) {
            _ref1.unhiglight();
          }
          if ((_ref2 = g.region) != null) {
            _ref2.show();
          }
        }
        if (geo.children() && geo.children().length !== 0) {
          if ((_ref3 = geo.region) != null) {
            _ref3.hide();
          }
          $.when.apply(null, _.pluck(geo.children(), 'ready')).always(function() {
            var ch, r, _ref4, _ref5, _results;
            _ref4 = geo.children();
            _results = [];
            for (id in _ref4) {
              ch = _ref4[id];
              if ((_ref5 = ch.points) != null ? _ref5.length : void 0) {
                r = ch.region || (ch.region = new MapRegion(ch));
                if (!r.added) {
                  _this.add(r);
                }
                _results.push(r.highlight());
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          });
        } else {
          geo.region.highlight();
        }
        if (!geo.center) {
          return _this.pos({
            bounds: geo.bounds()
          });
        } else {
          return _this.pos({
            center: geo.center,
            zoom: geo.zoom
          });
        }
      });
    };

    Map.prototype.add = function(o) {
      var _this = this;
      if (o instanceof MapRegion) {
        o.added = true;
        o.click = function(data) {
          return _this.notify('click', data);
        };
        o = o.draw();
      }
      if (o) {
        return this.ya.geoObjects.add(o);
      }
    };

    Map.prototype.ready = function(dfd) {
      var _this = this;
      return ymaps.ready(function() {
        var id;
        id = _this.sandbox.attr('id');
        if (!id) {
          _this.sandbox.attr('id', id = 'map' + (new Date).valueOf());
        }
        _this.ya = new ymaps.Map(id, _this.options.init.ya);
        return dfd.resolve(_this);
      });
    };

    return Map;

  })(Module);

  AddressNode = (function() {

    AddressNode.template = '#address_item';

    function AddressNode(geo) {
      this.geo = geo;
      if (typeof this.constructor.template === 'string') {
        this.constructor.template = $.template(null, $(this.constructor.template).html());
      }
      this.geo.address = this;
      this.el = $.tmpl(this.constructor.template, this.geo.data);
      this._local_events = this.el;
      mixin.events.apply(this);
    }

    AddressNode.prototype.events = {
      'click': 'on_click',
      'click .toggle': 'toggle_block'
    };

    AddressNode.prototype.on_click = function() {
      if (!this.selected) {
        return this.notify('click', this);
      }
    };

    AddressNode.prototype.toggle_block = function(e) {
      var block;
      block = $(e.target).data('toggle');
      return this.el.find(block || '.ministry').toggle(200);
    };

    AddressNode.prototype.selected = false;

    AddressNode.prototype.select = function() {
      this.selected = true;
      this.el.addClass('selected');
      return this.el.find('.on-select').show();
    };

    AddressNode.prototype.deselect = function() {
      this.selected = false;
      this.el.removeClass('selected');
      this.el.find('.on-select').hide();
      return this.el.find('.ministry').hide();
    };

    AddressNode.prototype.hide = function() {
      return this.el.fadeOut();
    };

    AddressNode.prototype.show = function() {
      this.hide_deeper();
      this.hide_neighbors();
      this.deselect_upper();
      this.select();
      return this.el.fadeIn(500);
    };

    AddressNode.prototype.hide_neighbors = function(opt) {
      var g, id, _ref, _ref1, _results;
      if (opt == null) {
        opt = {};
      }
      _ref = this.geo.neighbors();
      _results = [];
      for (id in _ref) {
        g = _ref[id];
        _results.push((_ref1 = g.address) != null ? _ref1.hide() : void 0);
      }
      return _results;
    };

    AddressNode.prototype.hide_deeper = function(opt) {
      var g, id, _ref, _ref1, _results;
      if (opt == null) {
        opt = {};
      }
      _ref = this.geo.deeper();
      _results = [];
      for (id in _ref) {
        g = _ref[id];
        _results.push((_ref1 = g.address) != null ? _ref1.hide() : void 0);
      }
      return _results;
    };

    AddressNode.prototype.deselect_upper = function() {
      var g, id, _ref, _ref1, _results;
      _ref = this.geo.upper();
      _results = [];
      for (id in _ref) {
        g = _ref[id];
        _results.push((_ref1 = g.address) != null ? _ref1.deselect() : void 0);
      }
      return _results;
    };

    AddressNode.prototype.added = false;

    return AddressNode;

  })();

  Address = (function(_super) {

    __extends(Address, _super);

    function Address() {
      Address.__super__.constructor.apply(this, arguments);
      this.change({
        id: 0
      });
    }

    Address.prototype.events = {
      'click {addressnode}': 'upper',
      'click {map}': 'from_map'
    };

    Address.prototype.from_map = function(e, data) {
      return this.change(data);
    };

    Address.prototype.upper = function(e, node) {
      return this.change({
        id: node.geo.id
      });
    };

    Address.prototype.change = function(data) {
      var _this = this;
      this.d = $.Deferred();
      $.when(Geo.find_or_create(data)).then(function(g) {
        var a, _ref;
        _this.notify('change', g);
        a = (_ref = g.address) != null ? _ref : new AddressNode(g);
        if (!a.added) {
          _this.sandbox.prepend(a.el);
          a.added = true;
        }
        return $.when(a.show()).done(function() {
          return _this.d.resolve();
        });
      });
      return this.d;
    };

    return Address;

  })(Module);

  Catalog = (function(_super) {

    __extends(Catalog, _super);

    Catalog.prototype.options = {
      template: '#catalog_item',
      url: '/offer/search?json=1&division_id=%id',
      root: 0
    };

    function Catalog() {
      Catalog.__super__.constructor.apply(this, arguments);
      if (typeof this.options.template === 'string') {
        this.options.template = $.template(null, $(this.options.template).html());
      }
      this.change();
    }

    Catalog.prototype.events = {
      'change select': 'change'
    };

    Catalog.prototype.get_list = function(id, f) {
      return $.getJSON(this.options.url.replace('%id', id), function(data) {
        if (data.children.length) {
          data.divisions.push(data.children);
        }
        return f(data.divisions);
      });
    };

    Catalog.prototype.change = function(e) {
      var id,
        _this = this;
      id = this.options.root;
      if (e) {
        id = $(e.target).val();
      }
      this.get_list(id, function(list) {
        return _this.sandbox.html($.tmpl(_this.options.template, {
          list: list
        }));
      });
      return this.notify('change', {
        div: id
      });
    };

    return Catalog;

  })(Module);

  Content = (function(_super) {

    __extends(Content, _super);

    function Content() {
      return Content.__super__.constructor.apply(this, arguments);
    }

    Content.prototype.events = {
      'change {address}': 'on_change',
      'change {catalog}': 'on_change'
    };

    Content.prototype.data = {};

    Content.prototype.on_change = function(e, data) {
      var t, _ref;
      t = (_ref = e.type.match(/{(.+)}/)) != null ? _ref[1] : void 0;
      this.data[t] = data;
      return this.update();
    };

    Content.prototype.url_helper = function(type, division, region) {
      return "/offer/search#division_id=" + division + "&json=1&type=" + type + "&model%5Bdivision_id%5D=" + division + "&model%5Bgeneral%5D%5Bregion%5D%5B%5D=" + region;
    };

    Content.prototype.update = function() {
      var q, _ref, _ref1,
        _this = this;
      q = {
        region: (_ref = this.data.address) != null ? _ref.id : void 0,
        division: (_ref1 = this.data.catalog) != null ? _ref1.div : void 0,
        ajax: 1
      };
      return $.post(offers_url, q, function(data) {
        _this.sandbox.find('.place').replaceWith(data);
        _this.sandbox.find('.sell a:last').attr({
          href: _this.url_helper(1, q.division, q.region)
        });
        return _this.sandbox.find('.buy a:last').attr({
          href: _this.url_helper(2, q.division, q.region)
        });
      });
    };

    return Content;

  })(Module);

  window.map = new Map('#map');

  address = a = new Address('#address');

  catalog = new Catalog('#catalog');

  content = new Content('#content');

  $.when(map.ready, address.ready, catalog.ready).then(function() {
    $('select[name=division]').val(43866).change();
    return recursiveChangeAddresses(start_region);
  });

  recursiveChangeAddresses = function(arr, i) {
    var addressItem;
    if (!i) {
      i = 0;
    }
    addressItem = arr[i];
    return $.when(address.change({
      id: addressItem,
      level: i
    })).done(function() {
      ++i;
      return setTimeout(function() {
        if (arr[i]) {
          return recursiveChangeAddresses(arr, i);
        }
      }, 510);
    });
  };

}).call(this);
